# -*- coding: utf-8 -*-
"""display.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CobYqQgLpRTX2KXeviywfEtIEGN3gblV
"""

# src/visualization/display.py
import pandas as pd
import json
from tabulate import tabulate
from ..data.preprocessing import parse_climb_stats, find_most_popular_setup
from ..features.grade_conversion import difficulty_to_vgrade, get_grade_conversion_table

def pretty_print_climbs(data, num_entries=20):
    """Load climb data and pretty print with V-grades

    Parameters:
    -----------
    data : str or pandas.DataFrame
        Either a file path (CSV or JSON) or a pandas DataFrame containing the climb data
    num_entries : int, optional
        Number of entries to display (default: 20)
    """
    # First check if data is a DataFrame
    if isinstance(data, pd.DataFrame):
        df = data
    # Otherwise, try to load data from a file path
    elif isinstance(data, str):
        if data.endswith('.csv'):
            df = pd.read_csv(data)
        elif data.endswith('.json'):
            with open(data, 'r') as f:
                json_data = json.load(f)
            df = pd.DataFrame(json_data)
        else:
            print("Unsupported file format. Please use CSV or JSON.")
            return
    else:
        print("Unsupported data type. Please provide a file path or pandas DataFrame.")
        return

    # Create display data
    display_data = []

    for _, row in df.head(num_entries).iterrows():
        name = row.get('name', 'Unnamed')
        setter = row.get('setter_username', 'Unknown')
        total_ascents = row.get('total_ascents', 0)

        # Find the most popular setup
        popular_setup = find_most_popular_setup(row.get('climb_stats', []))

        if popular_setup:
            angle = popular_setup.get('angle', 'N/A')
            difficulty = popular_setup.get('difficulty_average')
            vgrade = difficulty_to_vgrade(difficulty)
            ascensionist_count = popular_setup.get('ascensionist_count', 0)
            quality = popular_setup.get('quality_average', 'N/A')
            fa_username = popular_setup.get('fa_username', 'Unknown')

            display_data.append([
                name,
                setter,
                vgrade,
                angle,
                ascensionist_count,
                total_ascents,
                f"{quality:.1f}" if quality else 'N/A',
                fa_username
            ])
        else:
            display_data.append([name, setter, 'N/A', 'N/A', 0, total_ascents, 'N/A', 'N/A'])

    # Print as a nice table
    headers = [
        "Climb Name",
        "Setter",
        "V-Grade",
        "AngleÂ°",
        "Setup Ascents",
        "Total Ascents",
        "Rating",
        "FA by"
    ]
    print("\n" + tabulate(display_data, headers=headers, tablefmt="fancy_grid"))

    # Print explanation
    conversion_table = get_grade_conversion_table()
    print("\nGrade Conversion Information:")
    print("The V-grades are converted from Kilterboard 'difficulty_average' (0-40) using the following scale:")
    print(f"VB: {conversion_table['VB']}")
    print(f"V0: {conversion_table['V0']}, V1: {conversion_table['V1']}, V2: {conversion_table['V2']}, " +
          f"V3: {conversion_table['V3']}, V4: {conversion_table['V4']}, V5: {conversion_table['V5']}")
    print(f"V6: {conversion_table['V6']}, V7: {conversion_table['V7']}, V8: {conversion_table['V8']}, " +
          f"V9: {conversion_table['V9']}, V10: {conversion_table['V10']}")
    print(f"V11: {conversion_table['V11']}, V12: {conversion_table['V12']}, V13: {conversion_table['V13']}, " +
          f"V14: {conversion_table['V14']}, V15: {conversion_table['V15']}, V16+: {conversion_table['V16+']}")